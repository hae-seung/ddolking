using System.Collections;
using System.Collections.Generic;
using System.Text;
using TMPro;
using UnityEngine;
using UnityEngine.Serialization;
using UnityEngine.UI;

public class ToolTipUI : MonoBehaviour
{
    [SerializeField] private TextMeshProUGUI equipItemClassTxt;
    [SerializeField] private TextMeshProUGUI itemName;
    [SerializeField] private TextMeshProUGUI statTxt;
    [SerializeField] private TextMeshProUGUI contentTxt;
    [SerializeField] private GameObject interactableTxt; //Ïö∞ÌÅ¥Î¶≠Ïãú ÏÉÅÌò∏ÏûëÏö©Í∞ÄÎä•ÏùÑ ÎÇòÌÉÄÎÉÑ
    [SerializeField] private RectTransform parentRect;
    
    private StringBuilder sb = new StringBuilder();
    private RectTransform _rt;
    private CanvasScaler _canvasScaler;

    
    public void Show() => gameObject.SetActive(true);
    public void Hide() => gameObject.SetActive(false);
    
    private void Awake()
    {
        Init();
        Hide();
    }

    private void Init()
    {
        TryGetComponent(out _rt);
        _rt.pivot = new Vector2(0f, 1f);//Ï¢åÏÉÅÎã®
        _canvasScaler = GetComponentInParent<CanvasScaler>();
    }

    public void SetItemInfo(Item item)
    {
        itemName.text = item.itemData.Name;
        contentTxt.text = item.itemData.Description;
        
        statTxt.gameObject.SetActive(false);
        interactableTxt.SetActive(false);
        equipItemClassTxt.gameObject.SetActive(false);

        if (item is EquipItem equipItem)
            SetClassText(equipItem);
        
        if (item is IUseable || item is AmuletItem amuletItem)
            interactableTxt.SetActive(true);
        
        if (item is IStatModifier statItem)
            SetStatText(statItem);
    }

    private void SetClassText(EquipItem equipItem)
    {
        switch (equipItem.EquipData.itemclass)
        {
            case ItemClass.Normal :
                equipItemClassTxt.text = "ÏùºÎ∞ò";
                equipItemClassTxt.color = Color.gray;
                break;
            case ItemClass.Epic :
                equipItemClassTxt.text = "Í≥†Í∏â";
                equipItemClassTxt.color = new Color32(138, 43, 226, 255);
                break;
            case ItemClass.Unique:
                equipItemClassTxt.text = "Ìù¨Í∑Ä";
                equipItemClassTxt.color = Color.yellow;
                break;
            case ItemClass.Legend :
                equipItemClassTxt.text = "Ï†ÑÏÑ§";
                equipItemClassTxt.color = Color.green;
                break;
        }
        equipItemClassTxt.gameObject.SetActive(true);
    }

    private void SetStatText(IStatModifier statItem)
    {
        List<StatModifier> statModifiers = statItem.GetStatModifier();

        if (statModifiers != null)//Ïä§ÌÖü Î≥ÄÌôîÍ∞Ä ÏùºÏñ¥ÎÇòÎäî Í≤ΩÏö∞
        {
            sb.Clear();
            
            for (int i = 0; i < statModifiers.Count; i++)
            {
                int increaseAmount = statModifiers[i].increaseAmount;
                switch (statModifiers[i].stat)
                {
                    case Stat.MaxHP:
                        sb.AppendLine($"ÏµúÎåÄÏ≤¥Î†• : +{increaseAmount}");
                        break;
                    case Stat.HP:
                        sb.AppendLine($"Ï≤¥Î†• : +{increaseAmount}");
                        break;
                    case Stat.MaxEnergy:
                        sb.AppendLine($"ÏµúÎåÄÍ∏∞Î†• : +{increaseAmount}");
                        break;
                    case Stat.Energy:
                        sb.AppendLine($"Í∏∞Î†• : +{increaseAmount}");
                        break;
                    case Stat.Str:
                        sb.AppendLine($"Í∑ºÎ†• : +{increaseAmount}");
                        break;
                    case Stat.Luk:
                        sb.AppendLine($"ÌñâÏö¥ : +{increaseAmount}");
                        break;
                    case Stat.Speed:
                        sb.AppendLine($"Ïù¥ÎèôÏÜçÎèÑ : +{increaseAmount}");
                        break;
                    case Stat.MineSpeed:
                        sb.AppendLine($"Ï±ÑÍµ¥ÏÜçÎèÑ : +{increaseAmount}");
                        break;
                }
            }
            
            statTxt.text = sb.ToString();
            statTxt.gameObject.SetActive(true);
        }
    }
    
    public void SetRectPosition(RectTransform slotRect)
    {
        //1 Ìà¥ÌåÅÏùò PivotÏùÑ (0,1)Î°ú ÏÑ§Ï†ï ‚Üí Ï¢åÏÉÅÎã® Í∏∞Ï§Ä Ï†ïÎ†¨
        _rt.pivot = new Vector2(0f, 1f);

        // üîπ `parentRect`Í∞Ä nullÏù¥ ÏïÑÎãàÎ©¥ Î∂ÄÎ™® UIÎ°ú ÏÇ¨Ïö©
        if (parentRect == null)
        {
            return;
        }

        //2 Ïä¨Î°ØÏùò ÎÑ§ Î™®ÏÑúÎ¶¨ Ï¢åÌëúÎ•º Í∞ÄÏ†∏ÏôÄ Ï†ïÌôïÌïú Ïö∞ÌïòÎã® ÏúÑÏπò Í≥ÑÏÇ∞
        Vector3[] slotCorners = new Vector3[4];
        slotRect.GetWorldCorners(slotCorners);
        Vector3 slotBottomRight = slotCorners[3]; // ÎÑ§ Î≤àÏß∏ ÏöîÏÜåÍ∞Ä Ïö∞ÌïòÎã® Ï¢åÌëú

        // 3 Ïö∞ÌïòÎã® Ï¢åÌëúÎ•º Ïä§ÌÅ¨Î¶∞ Ï¢åÌëúÎ°ú Î≥ÄÌôò
        Vector2 tooltipScreenPos = RectTransformUtility.WorldToScreenPoint(null, slotBottomRight);
        

        // 4 Ïä§ÌÅ¨Î¶∞ Ï¢åÌëúÎ•º `parentRect` ÎÇ¥Î∂Ä Ï¢åÌëúÎ°ú Î≥ÄÌôò
        Vector2 tooltipLocalPos;
        RectTransformUtility.ScreenPointToLocalPointInRectangle(
            parentRect,  // Î≥ÄÌôò Í∏∞Ï§Ä (Ìà¥ÌåÅÏù¥ ÏÜçÌïú Î∂ÄÎ™® UI)
            tooltipScreenPos,  // Î≥ÄÌôòÌï† Ïä§ÌÅ¨Î¶∞ Ï¢åÌëú
            null,  // Overlay Î™®ÎìúÏùº Í≤ΩÏö∞ null
            out tooltipLocalPos
        );
        

        // 5 Ìà¥ÌåÅÏùò ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
        float width = _rt.rect.width;
        float height = _rt.rect.height;

        // 6 Ìà¥ÌåÅÏù¥ ÌôîÎ©¥ Î∞ñÏúºÎ°ú ÎÇòÍ∞ÄÎäîÏßÄ ÌôïÏù∏
        bool rightTruncated = tooltipScreenPos.x + width > Screen.width;
        bool bottomTruncated = tooltipScreenPos.y - height < 0f;

        // 7 Ìà¥ÌåÅ ÏúÑÏπò Ï°∞Ï†ï (Ïò§Î•∏Ï™Ω/ÏïÑÎûòÏ™ΩÏù¥ ÏûòÎ¶¥ Í≤ΩÏö∞)
        if (rightTruncated) tooltipLocalPos.x -= width;
        if (bottomTruncated) tooltipLocalPos.y += height;
        

        // 8 Ìà¥ÌåÅ ÏúÑÏπò Ï†ÅÏö©
        _rt.anchoredPosition = tooltipLocalPos;
    }



}
